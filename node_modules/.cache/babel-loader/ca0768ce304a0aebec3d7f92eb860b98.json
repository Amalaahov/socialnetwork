{"ast":null,"code":"import { profileApi } from \"../../api/api\";\nconst UP_STATUS_TEXT = 'UP_STATUS_TEXT';\nconst UP_JOB = 'UP_JOB';\nconst UP_CITY = 'UP_CITY';\nconst SET_STATUS = 'SET_STATUS';\nlet InitialState = {\n  status: 'Статус',\n  job: 'Работа',\n  city: 'Город',\n  userId: ''\n};\n\nconst ProfileReducer = (state = InitialState, action) => {\n  switch (action.type) {\n    case SET_STATUS:\n      {\n        let copyState = { ...state\n        };\n        copyState.status = action.status;\n        return copyState;\n      }\n\n    case UP_STATUS_TEXT:\n      {\n        return { ...state,\n          status: action.NewMessageText\n        };\n      }\n\n    case UP_JOB:\n      {\n        let copyState = { ...state\n        };\n        copyState.job = action.NewTextJob;\n        return copyState;\n      }\n\n    case UP_CITY:\n      {\n        let copyState = { ...state\n        };\n        copyState.city = action.NewTextCity;\n        return copyState;\n      }\n\n    default:\n      return state;\n  }\n};\n\n_c = ProfileReducer;\nexport default ProfileReducer;\nexport const SetStatusAC = status => ({\n  type: SET_STATUS,\n  status\n});\n_c2 = SetStatusAC;\nexport const UpdateStatusAC = newTextMessage => ({\n  type: UP_STATUS_TEXT,\n  newTextMessage\n});\n_c3 = UpdateStatusAC;\nexport const UpdateJobAC = NewTextJob => ({\n  type: UP_JOB,\n  NewTextJob\n});\n_c4 = UpdateJobAC;\nexport const UpdateCityAC = NewTextCity => ({\n  type: UP_CITY,\n  NewTextCity\n});\n_c5 = UpdateCityAC;\nexport const GetStatusThunk = userId => dispatch => {\n  profileApi.getStatus(userId).then(response => {\n    dispatch(SetStatusAC(response.data));\n  });\n};\nexport const UpdateStatusThunk = status => dispatch => {\n  profileApi.updateStatus(status).then(response => {\n    dispatch(SetStatusAC(response.data));\n  });\n};\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ProfileReducer\");\n$RefreshReg$(_c2, \"SetStatusAC\");\n$RefreshReg$(_c3, \"UpdateStatusAC\");\n$RefreshReg$(_c4, \"UpdateJobAC\");\n$RefreshReg$(_c5, \"UpdateCityAC\");","map":{"version":3,"sources":["/Users/malaahov/Documents/ReactJS/SocialNetwork/socialnetwork/src/redux/reducer/profilereducer.js"],"names":["profileApi","UP_STATUS_TEXT","UP_JOB","UP_CITY","SET_STATUS","InitialState","status","job","city","userId","ProfileReducer","state","action","type","copyState","NewMessageText","NewTextJob","NewTextCity","SetStatusAC","UpdateStatusAC","newTextMessage","UpdateJobAC","UpdateCityAC","GetStatusThunk","dispatch","getStatus","then","response","data","UpdateStatusThunk","updateStatus"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,eAAzB;AAEA,MAAMC,cAAc,GAAE,gBAAtB;AACA,MAAMC,MAAM,GAAC,QAAb;AACA,MAAMC,OAAO,GAAC,SAAd;AACA,MAAMC,UAAU,GAAC,YAAjB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,QADO;AAEfC,EAAAA,GAAG,EAAC,QAFW;AAGfC,EAAAA,IAAI,EAAE,OAHS;AAIfC,EAAAA,MAAM,EAAC;AAJQ,CAAnB;;AAQA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KACvB;AACI,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKT,UAAL;AACA;AAEO,YAAIU,SAAS,GAAE,EAAC,GAAGH;AAAJ,SAAf;AACAG,QAAAA,SAAS,CAACR,MAAV,GAAkBM,MAAM,CAACN,MAAzB;AACA,eAAOQ,SAAP;AAGN;;AAED,SAAKb,cAAL;AACA;AACR,eAAO,EAAC,GAAGU,KAAJ;AAAWL,UAAAA,MAAM,EAAEM,MAAM,CAACG;AAA1B,SAAP;AAES;;AACD,SAAKb,MAAL;AACA;AACI,YAAIY,SAAS,GAAC,EAAC,GAAGH;AAAJ,SAAd;AACAG,QAAAA,SAAS,CAACP,GAAV,GAAeK,MAAM,CAACI,UAAtB;AACA,eAAOF,SAAP;AACH;;AACD,SAAKX,OAAL;AACA;AACI,YAAIW,SAAS,GAAC,EAAC,GAAGH;AAAJ,SAAd;AACAG,QAAAA,SAAS,CAACN,IAAV,GAAgBI,MAAM,CAACK,WAAvB;AACA,eAAOH,SAAP;AACH;;AACD;AACI,aAAOH,KAAP;AA9BR;AAiCH,CAnCD;;KAAMD,c;AAqCN,eAAeA,cAAf;AAEA,OAAO,MAAMQ,WAAW,GAAIZ,MAAD,KAAa;AAACO,EAAAA,IAAI,EAACT,UAAN;AAAkBE,EAAAA;AAAlB,CAAb,CAApB;MAAMY,W;AACb,OAAO,MAAMC,cAAc,GAAIC,cAAD,KAAqB;AAACP,EAAAA,IAAI,EAAEZ,cAAP;AAAuBmB,EAAAA;AAAvB,CAArB,CAAvB;MAAMD,c;AACb,OAAO,MAAME,WAAW,GAAIL,UAAD,KAAiB;AAACH,EAAAA,IAAI,EAACX,MAAN;AAAcc,EAAAA;AAAd,CAAjB,CAApB;MAAMK,W;AACb,OAAO,MAAMC,YAAY,GAAIL,WAAD,KAAkB;AAACJ,EAAAA,IAAI,EAACV,OAAN;AAAec,EAAAA;AAAf,CAAlB,CAArB;MAAMK,Y;AAIb,OAAO,MAAMC,cAAc,GAAId,MAAD,IAAae,QAAD,IAAc;AAEpDxB,EAAAA,UAAU,CAACyB,SAAX,CAAqBhB,MAArB,EAA6BiB,IAA7B,CAAkCC,QAAQ,IAAI;AAE1CH,IAAAA,QAAQ,CAACN,WAAW,CAACS,QAAQ,CAACC,IAAV,CAAZ,CAAR;AAEH,GAJD;AAKH,CAPM;AAQP,OAAO,MAAMC,iBAAiB,GAAIvB,MAAD,IAAakB,QAAD,IAAc;AAEvDxB,EAAAA,UAAU,CAAC8B,YAAX,CAAwBxB,MAAxB,EAAgCoB,IAAhC,CAAqCC,QAAQ,IAAI;AAE7CH,IAAAA,QAAQ,CAACN,WAAW,CAACS,QAAQ,CAACC,IAAV,CAAZ,CAAR;AAEH,GAJD;AAKH,CAPM","sourcesContent":["import {profileApi} from \"../../api/api\";\n\nconst UP_STATUS_TEXT= 'UP_STATUS_TEXT';\nconst UP_JOB='UP_JOB';\nconst UP_CITY='UP_CITY';\nconst SET_STATUS='SET_STATUS';\n\n\nlet InitialState = {\n    status: 'Статус',\n    job:'Работа',\n    city: 'Город',\n    userId:''\n}\n\n\nconst ProfileReducer = (state = InitialState, action) =>\n{\n    switch (action.type)\n    {\n        case SET_STATUS:\n        {\n\n               let copyState= {...state};\n               copyState.status= action.status;\n               return copyState;\n\n\n        }\n\n        case UP_STATUS_TEXT:\n        {\nreturn {...state, status: action.NewMessageText}\n\n        }\n        case UP_JOB:\n        {\n            let copyState={...state};\n            copyState.job =action.NewTextJob;\n            return copyState;\n        }\n        case UP_CITY:\n        {\n            let copyState={...state};\n            copyState.city= action.NewTextCity;\n            return copyState;\n        }\n        default:\n            return state;\n    }\n\n}\n\nexport default ProfileReducer;\n\nexport const SetStatusAC = (status) => ({type:SET_STATUS, status});\nexport const UpdateStatusAC = (newTextMessage) => ({type: UP_STATUS_TEXT, newTextMessage});\nexport const UpdateJobAC = (NewTextJob) => ({type:UP_JOB, NewTextJob});\nexport const UpdateCityAC = (NewTextCity) => ({type:UP_CITY, NewTextCity});\n\n\n\nexport const GetStatusThunk = (userId) => (dispatch) => {\n\n    profileApi.getStatus(userId).then(response => {\n\n        dispatch(SetStatusAC(response.data));\n\n    });\n}\nexport const UpdateStatusThunk = (status) => (dispatch) => {\n\n    profileApi.updateStatus(status).then(response => {\n\n        dispatch(SetStatusAC(response.data));\n\n    });\n}\n\n"]},"metadata":{},"sourceType":"module"}