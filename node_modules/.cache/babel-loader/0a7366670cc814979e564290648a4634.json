{"ast":null,"code":"const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_USERS_COUNT = 'SET_USERS_COUNT';\nlet initialState = {\n  users: [],\n  pageSize: 10,\n  totalUsersCount: 20,\n  currentPage: 1,\n  newTextPost: 'Новое сообщение'\n};\n\nconst usersreducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW:\n      {\n        return { ...state,\n          users: state.users.map(u => {\n            if (u.id === action.userId) {\n              return { ...u,\n                followed: true\n              };\n            }\n\n            return u;\n          })\n        };\n      }\n\n    case UNFOLLOW:\n      {\n        return { ...state,\n          users: state.users.map(u => {\n            if (u.id === action.userId) {\n              return { ...u,\n                followed: false\n              };\n            }\n\n            return u;\n          })\n        };\n      }\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SET_USERS_COUNT:\n      return { ...state,\n        totalUsersCount: action.count\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const followAC = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowAC = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsersAC = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPageAC = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalCountAC = totalCount => ({\n  type: SET_USERS_COUNT,\n  count: totalCount\n});\nexport default usersreducer;","map":{"version":3,"sources":["/Volumes/4 TB/ReactJS/react/lesson1/myapp/src/redux/reducer/usersreducer.js"],"names":["FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_USERS_COUNT","initialState","users","pageSize","totalUsersCount","currentPage","newTextPost","usersreducer","state","action","type","map","u","id","userId","followed","count","followAC","unfollowAC","setUsersAC","setCurrentPageAC","setTotalCountAC","totalCount"],"mappings":"AAAA,MAAMA,MAAM,GAAG,QAAf;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AAIA,IAAIC,YAAY,GAAG;AAGZC,EAAAA,KAAK,EAAE,EAHK;AAOXC,EAAAA,QAAQ,EAAE,EAPC;AAQXC,EAAAA,eAAe,EAAE,EARN;AASXC,EAAAA,WAAW,EAAE,CATF;AAUXC,EAAAA,WAAW,EAAE;AAVF,CAAnB;;AAgBA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAwBQ,MAAxB,KAAmC;AAGpD,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAKd,MAAL;AAAY;AACR,eAAM,EACF,GAAGY,KADD;AAEFN,UAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYS,GAAZ,CAAgBC,CAAC,IAAG;AACvB,gBAAGA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAAnB,EACA;AACI,qBAAO,EAAC,GAAGF,CAAJ;AAAOG,gBAAAA,QAAQ,EAAE;AAAjB,eAAP;AACH;;AACD,mBAAOH,CAAP;AACH,WANM;AAFL,SAAN;AAUH;;AACG,SAAKf,QAAL;AACI;AACJ,eAAM,EACF,GAAGW,KADD;AAEFN,UAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYS,GAAZ,CAAgBC,CAAC,IAAG;AACvB,gBAAGA,CAAC,CAACC,EAAF,KAASJ,MAAM,CAACK,MAAnB,EACA;AACI,qBAAO,EAAC,GAAGF,CAAJ;AAAOG,gBAAAA,QAAQ,EAAE;AAAjB,eAAP;AACH;;AACD,mBAAOH,CAAP;AACH,WANM;AAFL,SAAN;AAUH;;AACG,SAAKd,SAAL;AAA+B;AACvB,eAAM,EAAC,GAAGU,KAAJ;AAAWN,UAAAA,KAAK,EAAEO,MAAM,CAACP;AAAzB,SAAN;AACH;;AACD,SAAKH,gBAAL;AAAuB,aAAM,EAAC,GAAGS,KAAJ;AAAWH,QAAAA,WAAW,EAAEI,MAAM,CAACJ;AAA/B,OAAN;;AAEvB,SAAKL,eAAL;AAAsB,aAAM,EAAC,GAAGQ,KAAJ;AAAWJ,QAAAA,eAAe,EAAEK,MAAM,CAACO;AAAnC,OAAN;;AAC9B;AACI,aAAOR,KAAP;AAlCR;AA0CH,CA7CD;;AA8CA,OAAO,MAAMS,QAAQ,GAAIH,MAAD,KAAa;AAACJ,EAAAA,IAAI,EAAEd,MAAP;AAAgBkB,EAAAA;AAAhB,CAAb,CAAjB;AACP,OAAO,MAAMI,UAAU,GAAIJ,MAAD,KAAa;AAACJ,EAAAA,IAAI,EAAEb,QAAP;AAAkBiB,EAAAA;AAAlB,CAAb,CAAnB;AACP,OAAO,MAAMK,UAAU,GAAIjB,KAAD,KAAY;AAACQ,EAAAA,IAAI,EAAEZ,SAAP;AAAmBI,EAAAA;AAAnB,CAAZ,CAAnB;AACP,OAAO,MAAMkB,gBAAgB,GAAIf,WAAD,KAAkB;AAACK,EAAAA,IAAI,EAAEX,gBAAP;AAA0BM,EAAAA;AAA1B,CAAlB,CAAzB;AACP,OAAO,MAAMgB,eAAe,GAAIC,UAAD,KAAiB;AAACZ,EAAAA,IAAI,EAAEV,eAAP;AAAyBgB,EAAAA,KAAK,EAAEM;AAAhC,CAAjB,CAAxB;AAEP,eAAef,YAAf","sourcesContent":["const FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\nconst SET_USERS_COUNT = 'SET_USERS_COUNT';\n\n\n\nlet initialState = {\n\n    \n       users: [\n            \n\n        ],\n        pageSize: 10,\n        totalUsersCount: 20,\n        currentPage: 1,\n        newTextPost: 'Новое сообщение'\n\n}\n\n\n\nconst usersreducer = (state = initialState , action) => {\n\n\n    switch(action.type)\n    {\n        case FOLLOW:{\n            return{\n                ...state,\n                users: state.users.map(u =>{\n                    if(u.id === action.userId )\n                    {\n                        return {...u, followed: true}\n                    }\n                    return u;\n                })\n            }\n        }\n            case UNFOLLOW:\n                {\n            return{\n                ...state,\n                users: state.users.map(u =>{\n                    if(u.id === action.userId )\n                    {\n                        return {...u, followed: false}\n                    }\n                    return u;\n                })\n            }\n        }\n            case SET_USERS:                {\n                    return{...state, users: action.users }\n                }\n                case SET_CURRENT_PAGE: return{...state, currentPage: action.currentPage}\n\n                case SET_USERS_COUNT: return{...state, totalUsersCount: action.count}\n        default:\n            return state;\n        \n\n    }\n\n\n\n\n}\nexport const followAC = (userId) => ({type: FOLLOW , userId})\nexport const unfollowAC = (userId) => ({type: UNFOLLOW , userId})\nexport const setUsersAC = (users) => ({type: SET_USERS , users})\nexport const setCurrentPageAC = (currentPage) => ({type: SET_CURRENT_PAGE , currentPage})\nexport const setTotalCountAC = (totalCount) => ({type: SET_USERS_COUNT , count: totalCount})\n\nexport default usersreducer;\n"]},"metadata":{},"sourceType":"module"}